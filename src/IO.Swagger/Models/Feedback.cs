/*
 * Smilr API
 *
 * Smilr microservice, RESTful data API
 *
 * OpenAPI spec version: 6.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Feedback : IEquatable<Feedback>
    { 
        /// <summary>
        /// Event id 
        /// </summary>
        /// <value>Event id </value>
        [Required]
        [DataMember(Name="event")]
        public string Event { get; set; }

        /// <summary>
        /// Topic id 
        /// </summary>
        /// <value>Topic id </value>
        [Required]
        [DataMember(Name="topic")]
        public int? Topic { get; set; }

        /// <summary>
        /// Rating score 
        /// </summary>
        /// <value>Rating score </value>
        [Required]
        [DataMember(Name="rating")]
        public decimal? Rating { get; set; }

        /// <summary>
        /// Optional comments 
        /// </summary>
        /// <value>Optional comments </value>
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Sentiment score 
        /// </summary>
        /// <value>Sentiment score </value>
        [DataMember(Name="sentiment")]
        public decimal? Sentiment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Feedback {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Feedback)obj);
        }

        /// <summary>
        /// Returns true if Feedback instances are equal
        /// </summary>
        /// <param name="other">Instance of Feedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feedback other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Event == other.Event ||
                    Event != null &&
                    Event.Equals(other.Event)
                ) && 
                (
                    Topic == other.Topic ||
                    Topic != null &&
                    Topic.Equals(other.Topic)
                ) && 
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Sentiment == other.Sentiment ||
                    Sentiment != null &&
                    Sentiment.Equals(other.Sentiment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Event != null)
                    hashCode = hashCode * 59 + Event.GetHashCode();
                    if (Topic != null)
                    hashCode = hashCode * 59 + Topic.GetHashCode();
                    if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Sentiment != null)
                    hashCode = hashCode * 59 + Sentiment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Feedback left, Feedback right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Feedback left, Feedback right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
