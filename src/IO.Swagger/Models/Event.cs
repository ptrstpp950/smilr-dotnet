/*
 * Smilr API
 *
 * Smilr microservice, RESTful data API
 *
 * OpenAPI spec version: 6.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Event : IEquatable<Event>
    { 
        /// <summary>
        /// Id of this event 
        /// </summary>
        /// <value>Id of this event </value>
        [Required]
        [DataMember(Name="_id")]
        [JsonPropertyName("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Descriptive title 
        /// </summary>
        /// <value>Descriptive title </value>
        [Required]
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Type of this event 
        /// </summary>
        /// <value>Type of this event </value>
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum EventEnum for event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1,
            
            /// <summary>
            /// Enum HackEnum for hack
            /// </summary>
            [EnumMember(Value = "hack")]
            Hack = 2,
            
            /// <summary>
            /// Enum LabEnum for lab
            /// </summary>
            [EnumMember(Value = "lab")]
            Lab = 3,
            
            /// <summary>
            /// Enum WorkshopEnum for workshop
            /// </summary>
            [EnumMember(Value = "workshop")]
            Workshop = 4
        }

        /// <summary>
        /// Type of this event 
        /// </summary>
        /// <value>Type of this event </value>
        [Required]
        [DataMember(Name="type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Start date in RFC 3339 format 
        /// </summary>
        /// <value>Start date in RFC 3339 format </value>
        [Required]
        [DataMember(Name="start")]
        public DateTimeOffset Start { get; set; }

        /// <summary>
        /// End date in RFC 3339 format 
        /// </summary>
        /// <value>End date in RFC 3339 format </value>
        [Required]
        [DataMember(Name="end")]
        public DateTimeOffset End { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [Required]
        [DataMember(Name="topics")]
        public List<Topic> Topics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Event)obj);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="other">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) && 
                (
                    Topics == other.Topics ||
                    Topics != null &&
                    Topics.SequenceEqual(other.Topics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                    if (Topics != null)
                    hashCode = hashCode * 59 + Topics.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Event left, Event right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Event left, Event right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
