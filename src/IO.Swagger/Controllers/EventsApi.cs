/*
 * Smilr API
 *
 * Smilr microservice, RESTful data API
 *
 * OpenAPI spec version: 6.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using IO.Swagger.Attributes;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using ProblemDetails = IO.Swagger.Models.ProblemDetails;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new event</remarks>
        /// <param name="_event">The new event to create</param>
        /// <response code="200">An array of events</response>
        /// <response code="400">Validation error, invalid event</response>
        /// <response code="500">Unexpected error</response>
        [HttpPost]
        [Route("/api/events")]
        [ValidateModelState]
        [SwaggerOperation("EventCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Validation error, invalid event")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error")]
        public virtual IActionResult EventCreate([FromBody]Event _event)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ProblemDetails));

            string exampleJson = null;
            exampleJson = "[ {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n}, {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n} ]";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete an event</remarks>
        /// <param name="id">ID of event to delete</param>
        /// <response code="200">An confirmation message in JSON</response>
        /// <response code="404">Event with given id not found</response>
        /// <response code="500">Unexpected error  /</response>
        [HttpDelete]
        [Route("/api/events/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EventDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Event with given id not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error  /")]
        public virtual IActionResult EventDelete([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ProblemDetails));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This returns ALL events</remarks>
        /// <response code="200">An array of events</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/events")]
        [ValidateModelState]
        [SwaggerOperation("EventGetAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error")]
        public virtual IActionResult EventGetAll()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ProblemDetails));

            string exampleJson = null;
            exampleJson = "[ {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n}, {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n} ]";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This returns events matching given time range: past, active or future</remarks>
        /// <param name="time">Time range to filter on - eg: past,active,future</param>
        /// <response code="200">An array of events</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/events/filter/{time}")]
        [ValidateModelState]
        [SwaggerOperation("EventGetFiltered")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error")]
        public virtual IActionResult EventGetFiltered([FromRoute][Required]string time)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ProblemDetails));

            string exampleJson = null;
            exampleJson = "[ {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n}, {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n} ]";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a single event</remarks>
        /// <param name="id">Id of event to update</param>
        /// <response code="200">An array of events</response>
        /// <response code="404">Event with given id not found</response>
        /// <response code="500">Unexpected error  /</response>
        [HttpGet]
        [Route("/api/events/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EventGetSingle")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Event with given id not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error  /")]
        public virtual IActionResult EventGetSingle([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ProblemDetails));

            string exampleJson = null;
            exampleJson = "[ {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n}, {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n} ]";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update an event</remarks>
        /// <param name="_event">The event to update</param>
        /// <param name="id">Id of event to update</param>
        /// <response code="200">An array of events</response>
        /// <response code="400">Validation error, invalid event</response>
        /// <response code="404">Event with given id not found</response>
        /// <response code="500">Unexpected error  /</response>
        [HttpPut]
        [Route("/api/events/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EventUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Validation error, invalid event")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Event with given id not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error  /")]
        public virtual IActionResult EventUpdate([FromBody]Event _event, [FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ProblemDetails));

            string exampleJson = null;
            exampleJson = "[ {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n}, {\n  \"topics\" : [ {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  }, {\n    \"id\" : 2,\n    \"desc\" : \"How to make nice cheese\"\n  } ],\n  \"start\" : \"2020-02-15\",\n  \"end\" : \"2020-02-16\",\n  \"_id\" : \"FOO12\",\n  \"title\" : \"Workshop about cheese\",\n  \"type\" : \"event\"\n} ]";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
