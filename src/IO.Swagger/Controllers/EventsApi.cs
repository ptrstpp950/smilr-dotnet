/*
 * Smilr API
 *
 * Smilr microservice, RESTful data API
 *
 * OpenAPI spec version: 6.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using IO.Swagger.Attributes;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.EntityFrameworkCore;
using ProblemDetails = IO.Swagger.Models.ProblemDetails;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventsApiController : ControllerBase
    { 
        private readonly ApplicationDbContext _dbContext;

        /// <inheritdoc />
        public EventsApiController(ApplicationDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new event</remarks>
        /// <param name="event">The new event to create</param>
        /// <response code="200">An array of events</response>
        /// <response code="400">Validation error, invalid event</response>
        /// <response code="500">Unexpected error</response>
        [HttpPost]
        [Route("/api/events")]
        [ValidateModelState]
        [SwaggerOperation("EventCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Validation error, invalid event")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error")]
        public virtual async Task<IActionResult> EventCreate([FromBody] Event @event)
        {
            try
            {
                _dbContext.Events.Add(@event);
                await _dbContext.SaveChangesAsync();
                return EventGetAll();
            }
            catch (Exception ex)
            {
                return StatusCode(500,
                    new ProblemDetails() {Details = ex.Message, Error = true, Source = ex.Source, Title = "fatal"});
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete an event</remarks>
        /// <param name="id">ID of event to delete</param>
        /// <response code="200">An confirmation message in JSON</response>
        /// <response code="404">Event with given id not found</response>
        /// <response code="500">Unexpected error  /</response>
        [HttpDelete]
        [Route("/api/events/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EventDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Event with given id not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error  /")]
        public virtual async Task<IActionResult> EventDelete([FromRoute] [Required] string id)
        {
            var evt = await _dbContext.FindAsync<Event>(id);
            if (evt == null)
                return StatusCode(404);
            _dbContext.Remove(evt);
            await _dbContext.SaveChangesAsync();
            return StatusCode(200);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This returns ALL events</remarks>
        /// <response code="200">An array of events</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/events")]
        [ValidateModelState]
        [SwaggerOperation("EventGetAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error")]
        public virtual IActionResult EventGetAll()
        { 
            return new ObjectResult(_dbContext.Events.Select(x => x).ToArray());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This returns events matching given time range: past, active or future</remarks>
        /// <param name="time">Time range to filter on - eg: past,active,future</param>
        /// <response code="200">An array of events</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/events/filter/{time}")]
        [ValidateModelState]
        [SwaggerOperation("EventGetFiltered")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error")]
        public virtual IActionResult EventGetFiltered([FromRoute][Required]string time)
        {
            var today = DateTime.Today;
            switch (time)
            {
                case "active":
                    return new ObjectResult(_dbContext.Events.Where(x => x.Start <= today && x.End >= today)
                        .Select(x => x).ToArray()); 
                case "future":
                    return new ObjectResult(_dbContext.Events.Where(x => x.Start >= today)
                        .Select(x => x).ToArray());
                case "past":
                    return new ObjectResult(_dbContext.Events.Where(x => x.End <= today)
                        .Select(x => x).ToArray());
                default:
                    return new ObjectResult(new ProblemDetails()
                    {
                        Error = true, Title = "ValidationError",
                        Details = "Supplied time value must be one of: [active, future, past]"
                    }) {StatusCode = 500};
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a single event</remarks>
        /// <param name="id">Id of event to update</param>
        /// <response code="200">An array of events</response>
        /// <response code="404">Event with given id not found</response>
        /// <response code="500">Unexpected error  /</response>
        [HttpGet]
        [Route("/api/events/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EventGetSingle")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Event with given id not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error  /")]
        public virtual async Task<IActionResult> EventGetSingle([FromRoute] [Required] string id)
        {
            var evt = await _dbContext.FindAsync<Event>(id);
            if (evt == null)
                return StatusCode(404);
            return new ObjectResult(evt);

        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update an event</remarks>
        /// <param name="_event">The event to update</param>
        /// <param name="id">Id of event to update</param>
        /// <response code="200">An array of events</response>
        /// <response code="400">Validation error, invalid event</response>
        /// <response code="404">Event with given id not found</response>
        /// <response code="500">Unexpected error  /</response>
        [HttpPut]
        [Route("/api/events/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EventUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "An array of events")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Validation error, invalid event")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Event with given id not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ProblemDetails), description: "Unexpected error  /")]
        public virtual async Task<IActionResult> EventUpdate([FromBody] Event _event, [FromRoute] [Required] string id)
        { 
            var evt = await _dbContext.FindAsync<Event>(id);
            if (evt == null)
                return StatusCode(404);
            _dbContext.Entry(evt).CurrentValues.SetValues(_event);
            await _dbContext.SaveChangesAsync();

            return EventGetAll();
        }
    }
}
